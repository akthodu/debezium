version: "3.9"

services:
  zookeeper:
    platform: linux/x86_64
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s

  broker:
    platform: linux/x86_64
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  debezium:
    platform: linux/x86_64
    image: quay.io/debezium/connect:latest
    restart: always
    container_name: debezium
    hostname: debezium
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_healthy
    ports:
      - "8083:8083"
      - "8040:8040"
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: "true"
      KAFKA_OPTS: -javaagent:/tmp/jmx_prometheus_javaagent.jar=8040:/u01/jmx-kafka-connect-config.yaml
      JMXHOST: "0.0.0.0"
      JMXPORT: 9012
    volumes:
      - ./jars/jmx_prometheus_javaagent-0.20.0.jar:/tmp/jmx_prometheus_javaagent.jar
      - ./conf/jmx-kafka-connect-config.yaml:/u01/jmx-kafka-connect-config.yaml
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "-X", "GET", "http://localhost:8083/connectors"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5


  postgres:
      platform: linux/x86_64
      image: postgres:latest
      restart: always
      container_name: postgres
      hostname: postgres
      ports:
        - "5432:5432"
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: movies_db
      command: ["postgres", "-c", "wal_level=logical"]
      healthcheck:
        test: ["CMD", "psql", "-U", "postgres", "-c", "SELECT 1"]
        interval: 10s
        timeout: 5s
        retries: 5
      volumes:
        - ./scripts:/docker-entrypoint-initdb.d

  kafka-ui:
    platform: linux/x86_64
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
    depends_on:
      - broker

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9001:9090"
    depends_on:
      - debezium
    volumes:
      - ./prometheus:/etc/prometheus/
      - ./prometheus-data:/prometheus
    # *-----------------------------*
    # To refresh the targets:
    #   curl -X POST http://localhost:9001/-/reload
    # *-----------------------------*
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
